"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.swcExecutor = exports.normalizeOptions = void 0;
const tslib_1 = require("tslib");
const assets_1 = require("@nrwl/workspace/src/utilities/assets");
const path_1 = require("path");
const rxjs_for_await_1 = require("rxjs-for-await");
const operators_1 = require("rxjs/operators");
const check_dependencies_1 = require("../../utils/check-dependencies");
const compile_swc_1 = require("../../utils/swc/compile-swc");
const update_package_json_1 = require("../../utils/update-package-json");
function normalizeOptions(options, contextRoot, sourceRoot, projectRoot) {
    const outputPath = (0, path_1.join)(contextRoot, options.outputPath);
    if (options.skipTypeCheck == null) {
        options.skipTypeCheck = false;
    }
    if (options.watch == null) {
        options.watch = false;
    }
    const files = (0, assets_1.assetGlobsToFiles)(options.assets, contextRoot, outputPath);
    return Object.assign(Object.assign({}, options), { swcrcPath: (0, path_1.join)(projectRoot, '.swcrc'), mainOutputPath: (0, path_1.resolve)(outputPath, options.main.replace(`${projectRoot}/`, '').replace('.ts', '.js')), files, root: contextRoot, sourceRoot,
        projectRoot,
        outputPath, tsConfig: (0, path_1.join)(contextRoot, options.tsConfig) });
}
exports.normalizeOptions = normalizeOptions;
function swcExecutor(options, context) {
    return (0, tslib_1.__asyncGenerator)(this, arguments, function* swcExecutor_1() {
        const { sourceRoot, root } = context.workspace.projects[context.projectName];
        const normalizedOptions = normalizeOptions(options, context.root, sourceRoot, root);
        const { tmpTsConfig, projectRoot } = (0, check_dependencies_1.checkDependencies)(context, options.tsConfig);
        if (tmpTsConfig) {
            normalizedOptions.tsConfig = tmpTsConfig;
        }
        return yield (0, tslib_1.__await)(yield (0, tslib_1.__await)(yield* (0, tslib_1.__asyncDelegator)((0, tslib_1.__asyncValues)((0, rxjs_for_await_1.eachValueFrom)((0, compile_swc_1.compileSwc)(context, normalizedOptions, () => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            yield updatePackageAndCopyAssets(normalizedOptions, projectRoot);
        })).pipe((0, operators_1.map)(({ success }) => ({
            success,
            outfile: normalizedOptions.mainOutputPath,
        }))))))));
    });
}
exports.swcExecutor = swcExecutor;
function updatePackageAndCopyAssets(options, projectRoot) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        yield (0, assets_1.copyAssetFiles)(options.files);
        (0, update_package_json_1.updatePackageJson)(options.main, options.outputPath, projectRoot, !options.skipTypeCheck);
    });
}
exports.default = swcExecutor;
//# sourceMappingURL=swc.impl.js.map