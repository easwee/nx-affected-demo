"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RunOneTerminalOutputLifeCycle = void 0;
const output_1 = require("../utilities/output");
const utils_1 = require("./utils");
class RunOneTerminalOutputLifeCycle {
    constructor(initiatingProject, projectNames, tasks, args) {
        this.initiatingProject = initiatingProject;
        this.projectNames = projectNames;
        this.tasks = tasks;
        this.args = args;
        this.failedTasks = [];
        this.cachedTasks = [];
        this.skippedTasks = [];
    }
    startCommand() {
        if (process.env.NX_INVOKED_BY_RUNNER) {
            return;
        }
        const numberOfDeps = this.tasks.length - 1;
        if (numberOfDeps > 0) {
            output_1.output.log({
                title: `${output_1.output.colors.gray('Running target')} ${this.args.target} ${output_1.output.colors.gray('for project')} ${this.initiatingProject} ${output_1.output.colors.gray(`and`)} ${numberOfDeps} task(s) ${output_1.output.colors.gray(`that it depends on.`)}
        `,
            });
            output_1.output.addVerticalSeparatorWithoutNewLines();
        }
    }
    endCommand() {
        // Silent for a single task
        if (process.env.NX_INVOKED_BY_RUNNER) {
            return;
        }
        output_1.output.addNewline();
        output_1.output.addVerticalSeparatorWithoutNewLines();
        if (this.failedTasks.length === 0) {
            const bodyLines = this.cachedTasks.length > 0
                ? [
                    output_1.output.colors.gray(`Nx read the output from cache instead of running the command for ${this.cachedTasks.length} out of ${this.tasks.length} tasks.`),
                ]
                : [];
            output_1.output.success({
                title: `Running target "${this.args.target}" succeeded`,
                bodyLines,
            });
        }
        else {
            const bodyLines = [
                output_1.output.colors.gray('Failed tasks:'),
                '',
                ...this.failedTasks.map((task) => `${output_1.output.colors.gray('-')} ${task.id}`),
                '',
                `${output_1.output.colors.gray('Hint: run the command with')} --verbose ${output_1.output.colors.gray('for more details.')}`,
            ];
            output_1.output.error({
                title: `Running target "${this.initiatingProject}:${this.args.target}" failed`,
                bodyLines,
            });
        }
    }
    endTasks(taskResults) {
        for (let t of taskResults) {
            if (t.status === 'failure') {
                this.failedTasks.push(t.task);
            }
            else if (t.status === 'skipped') {
                this.skippedTasks.push(t.task);
            }
            else if (t.status === 'cache') {
                this.cachedTasks.push(t.task);
            }
        }
    }
    printTaskTerminalOutput(task, cacheStatus, terminalOutput) {
        if (cacheStatus === output_1.TaskCacheStatus.NoCache ||
            task.target.project === this.initiatingProject) {
            const args = (0, utils_1.getCommandArgsForTask)(task);
            output_1.output.logCommand(`nx ${args.join(' ')}`, cacheStatus);
            process.stdout.write(terminalOutput);
        }
    }
}
exports.RunOneTerminalOutputLifeCycle = RunOneTerminalOutputLifeCycle;
//# sourceMappingURL=run-one-terminal-output-life-cycle.js.map