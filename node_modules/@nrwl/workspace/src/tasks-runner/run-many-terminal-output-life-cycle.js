"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RunManyTerminalOutputLifeCycle = void 0;
const output_1 = require("../utilities/output");
const utils_1 = require("./utils");
class RunManyTerminalOutputLifeCycle {
    constructor(projectNames, tasks, args, taskOverrides) {
        this.projectNames = projectNames;
        this.tasks = tasks;
        this.args = args;
        this.taskOverrides = taskOverrides;
        this.failedTasks = [];
        this.cachedTasks = [];
        this.skippedTasks = [];
    }
    startCommand() {
        if (this.projectNames.length <= 0) {
            let description = `with "${this.args.target}"`;
            if (this.args.configuration) {
                description += ` that are configured for "${this.args.configuration}"`;
            }
            output_1.output.logSingleLine(`No projects ${description} were run`);
            return;
        }
        const bodyLines = this.projectNames.map((affectedProject) => `${output_1.output.colors.gray('-')} ${affectedProject}`);
        if (Object.keys(this.taskOverrides).length > 0) {
            bodyLines.push('');
            bodyLines.push(`${output_1.output.colors.gray('With flags:')}`);
            Object.entries(this.taskOverrides)
                .map(([flag, value]) => `  --${flag}=${value}`)
                .forEach((arg) => bodyLines.push(arg));
        }
        let title = `${output_1.output.colors.gray('Running target')} ${this.args.target} ${output_1.output.colors.gray(`for`)} ${this.projectNames.length} project(s)`;
        const dependentTasksCount = this.tasks.length - this.projectNames.length;
        if (dependentTasksCount > 0) {
            title += ` ${output_1.output.colors.gray(`and`)} ${this.tasks.length - this.projectNames.length} task(s) ${output_1.output.colors.gray(`they depend on`)}`;
        }
        title += ':';
        output_1.output.log({
            title,
            bodyLines,
        });
        output_1.output.addVerticalSeparatorWithoutNewLines();
    }
    endCommand() {
        output_1.output.addNewline();
        output_1.output.addVerticalSeparatorWithoutNewLines();
        if (this.failedTasks.length === 0) {
            const bodyLines = this.cachedTasks.length > 0
                ? [
                    output_1.output.colors.gray(`Nx read the output from cache instead of running the command for ${this.cachedTasks.length} out of ${this.tasks.length} tasks.`),
                ]
                : [];
            output_1.output.success({
                title: `Running target "${this.args.target}" succeeded`,
                bodyLines,
            });
        }
        else {
            const bodyLines = [];
            if (this.skippedTasks.length > 0) {
                bodyLines.push(output_1.output.colors.gray('Tasks not run because their dependencies failed:'), '', ...this.skippedTasks.map((task) => `${output_1.output.colors.gray('-')} ${task.id}`), '');
            }
            bodyLines.push(output_1.output.colors.gray('Failed tasks:'), '', ...this.failedTasks.map((task) => `${output_1.output.colors.gray('-')} ${task.id}`));
            output_1.output.error({
                title: `Running target "${this.args.target}" failed`,
                bodyLines,
            });
        }
    }
    endTasks(taskResults) {
        for (let t of taskResults) {
            if (t.status === 'failure') {
                this.failedTasks.push(t.task);
            }
            else if (t.status === 'skipped') {
                this.skippedTasks.push(t.task);
            }
            else if (t.status === 'cache') {
                this.cachedTasks.push(t.task);
            }
        }
    }
    printTaskTerminalOutput(task, cacheStatus, terminalOutput) {
        const args = (0, utils_1.getCommandArgsForTask)(task);
        output_1.output.logCommand(`nx ${args.join(' ')}`, cacheStatus);
        process.stdout.write(terminalOutput);
    }
}
exports.RunManyTerminalOutputLifeCycle = RunManyTerminalOutputLifeCycle;
//# sourceMappingURL=run-many-terminal-output-life-cycle.js.map